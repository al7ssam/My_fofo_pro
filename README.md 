
# مشروع إدارة الطلبات والخدمات (V3)  
# Orders & Services Management Project (V3)

---

## نظرة عامة / Overview

### العربية:
هذا المشروع هو نظام متكامل لإرسال الطلبات وإدارة الخدمات باستخدام واجهة أمامية حديثة وخادم وسيط (Proxy Server) للتواصل مع مزودي الخدمات الخارجيين مثل DrD3m و Seoclevers. يوفر المشروع تجربة مستخدم شاملة من خلال واجهتين رئيسيتين: صفحة إرسال الطلبات (index.html) وصفحة إدارة الخدمات (manage_services.html). كما يتضمن النظام حماية بكلمة مرور لكل صفحة، مع شاشة قفل حديثة وتصميم داكن بتأثيرات شفافة وتمويه مشابه لأنظمة iOS. بالإضافة إلى ذلك، يتم تعريب رسائل الاستجابة القادمة من الـ API لتظهر للمستخدم باللغة العربية.

### English:
This project is a comprehensive system for sending orders and managing services via a modern front-end interface and a proxy server that communicates with external service providers such as DrD3m and Seoclevers. It provides a complete user experience through two main interfaces: the orders page (index.html) and the services management page (manage_services.html). The system includes password protection for each page with a modern lock screen featuring a dark theme with transparent and blurred effects similar to iOS. Additionally, API response messages are translated into Arabic for the end-user.

---

## الميزات والخواص / Features and Capabilities

### العربية:
- **واجهة إرسال الطلبات (index.html + client.js):**
  - تعبئة قوائم التصنيفات الرئيسية والفرعية والباقات من بيانات مخزنة في servicesData.json أو localStorage.
  - توليد صيغة الطلب تلقائيًا بصيغة: serviceID | link | quantity.
  - إرسال الطلبات عبر خادم وسيط (Proxy Server) باستخدام مفاتيح API مخزنة في متغيرات البيئة (Environment Variables)، مما يحسن الأمان وسهولة التعديل.
  - عرض تقرير تفصيلي بعد الإرسال يشمل عدد الطلبات الناجحة والفاشلة مع تعريب رسائل الاستجابة.

- **واجهة إدارة الخدمات (manage_services.html + manage_app.js):**
  - إمكانية إضافة وتعديل وحذف التصنيفات والخدمات.
  - إدارة بيانات الخدمات باستخدام نفس المصدر (servicesData.json والـ localStorage).
  - عرض الخدمات الخام بشكل منفصل وتحديثها تلقائيًا عند التعديل.

- **نظام الحماية بكلمة مرور (lock.js + passwords.json):**
  - شاشة قفل تظهر عند تحميل الصفحات لمنع الوصول غير المصرح به.
  - كلمات مرور منفصلة لكل صفحة تُخزن في ملف passwords.json.
  - دعم الضغط على مفتاح Enter في حقل الإدخال لتنفيذ التحقق.

- **ترجمة رسائل الاستجابة (translateResponse):**
  - دالة translateResponse (في client.js) تقوم بتحويل رسائل الاستجابة الإنجليزية إلى نصوص عربية واضحة.

- **خادم وسيط (Proxy Server) (server.js):**
  - يعمل باستخدام Node.js و Express لتجاوز قيود CORS وحماية مفاتيح الـ API.
  - يعتمد على متغيرات البيئة (مثل DRD3M_API_KEY و SEOCLEVERS_API_KEY) لتخزين مفاتيح الـ API.
  - يتضمن كود "self-ping" لإبقاء التطبيق نشطًا على استضافة Render.

### English:
- **Orders Page (index.html + client.js):**
  - Populates main, sub, and package category lists from data stored in servicesData.json or localStorage.
  - Automatically generates the order formula in the format: serviceID | link | quantity.
  - Sends orders via a proxy server using API keys stored in environment variables, ensuring better security and ease of modification.
  - Displays a detailed report after submission showing the number of successful and failed orders, with translated response messages.

- **Services Management Page (manage_services.html + manage_app.js):**
  - Allows adding, editing, and deleting categories and services.
  - Manages services data using the same source (servicesData.json and localStorage).
  - Displays raw services separately and updates them automatically upon modifications.

- **Password Protection System (lock.js + passwords.json):**
  - A lock screen appears on page load to prevent unauthorized access.
  - Separate passwords for each page are stored in passwords.json.
  - Supports pressing the Enter key in the input field to submit the password.

- **API Response Translation (translateResponse):**
  - The translateResponse function (in client.js) converts English API response messages into clear Arabic texts.

- **Proxy Server (server.js):**
  - Built with Node.js and Express to bypass CORS restrictions and secure API keys.
  - Loads API keys from environment variables (e.g., DRD3M_API_KEY and SEOCLEVERS_API_KEY).
  - Includes a self-ping mechanism to keep the application active on Render hosting.

---

## هيكلية الملفات / File Structure

### العربية:
MY_FOFO/ ├── node_modules/ // مجلد التبعيات (يُنشأ عند npm install) ├── public/ │ ├── client.js // منطق الواجهة الأمامية │ ├── index.html // صفحة إرسال الطلبات │ ├── lock.js // منطق شاشة القفل والتحقق │ ├── manage_app.js // منطق إدارة الخدمات (واجهة) │ ├── manage_services.html // صفحة إدارة الخدمات │ └── (ملفات أخرى مثل styles.css أو مجلد images...) ├── server.js // خادم وسيط (Proxy) باستخدام Node.js وExpress ├── passwords.json // كلمات المرور لكل صفحة ├── servicesData.json // بيانات التصنيفات وقائمة الخدمات ├── package.json // إعدادات المشروع والتبعيات ├── package-lock.json // معلومات تثبيت التبعيات ├── README.md // الملف التوثيقي للمشروع └── .gitignore/.gitattributes (اختياري)


### English:
MY_FOFO/ ├── node_modules/ // Dependencies folder (created by npm install) ├── public/ │ ├── client.js // Front-end logic │ ├── index.html // Orders page │ ├── lock.js // Lock screen logic │ ├── manage_app.js // Services management logic (front-end) │ ├── manage_services.html // Services management page │ └── (Other files like styles.css or images folder...) ├── server.js // Proxy server built with Node.js & Express ├── passwords.json // Passwords for each page ├── servicesData.json // Categories and services data ├── package.json // Project settings and dependencies ├── package-lock.json // Dependency lock file ├── README.md // Project documentation └── .gitignore/.gitattributes (optional)


---

## كيفية التثبيت / Installation

### العربية:
1. **استنساخ المشروع:**
   ```bash
   git clone <repository-url>
   cd MY_FOFO
تثبيت التبعيات:
npm install
ضبط مفاتيح الـ API:
تأكد من تعيين مفاتيح الـ API في متغيرات البيئة (مثل DRD3M_API_KEY و SEOCLEVERS_API_KEY).
يتم قراءة هذه المفاتيح في ملف server.js.
تعديل ملف passwords.json:
قم بتحديث كلمات المرور الخاصة بالصفحات (مثل orderPage و manageServicesPage).
English:
Clone the repository:
git clone <repository-url>
cd MY_FOFO
Install dependencies:
npm install
Configure API keys:
Ensure API keys are set in environment variables (e.g., DRD3M_API_KEY and SEOCLEVERS_API_KEY).
These keys are read in server.js.
Edit passwords.json:
Update the passwords for the pages (e.g., orderPage and manageServicesPage).
كيفية الاستخدام / Usage

العربية:
تشغيل المشروع محليًا:
يمكنك تشغيل المشروع باستخدام:
npm start
أو:
node server.js
الوصول إلى الواجهات:
افتح public/index.html لإرسال الطلبات.
افتح public/manage_services.html لإدارة الخدمات والتصنيفات.
استخدام شاشة القفل:
ستظهر شاشة القفل عند تحميل الصفحة.
أدخل كلمة المرور المناسبة (المحددة في passwords.json) واضغط على Enter.
إرسال الطلبات:
اختر التصنيف المطلوب وأدخل الرابط والكمية.
اضغط على زر الإرسال ليتم إرسال الطلبات عبر الخادم الوسيط.
ستظهر نافذة Toast تعرض تقريرًا عن الطلبات الناجحة والفاشلة مع تعريب رسائل الاستجابة.
إدارة الخدمات:
استخدم صفحة manage_services.html لإضافة وتعديل وحذف التصنيفات والخدمات.
يتم تخزين البيانات في servicesData.json و localStorage.
English:
Running the Project Locally:
You can run the project using:
npm start
or:
node server.js
Accessing the Interfaces:
Open public/index.html for order submission.
Open public/manage_services.html for managing services and categories.
Using the Lock Screen:
A lock screen will appear on page load.
Enter the correct password (as specified in passwords.json) and press Enter.
Submitting Orders:
Select the desired category and enter the link and quantity.
Click the send button to submit orders via the proxy server.
A Toast notification will display a detailed report of successful and failed orders with translated response messages.
Managing Services:
Use the manage_services.html page to add, edit, and delete categories and services.
Data is stored in servicesData.json and localStorage.
تفاصيل الـ API / API Details

لمزود "دكتور دعم" / DrD3m API
طريقة الطلب: POST
API URL: https://drd3m.me/api/v2
المعلمات الأساسية:
key: مفتاح API الخاص بك.
action: مثل "services" لاستعلام الخدمات، "add" لإضافة طلب، "status" لاستعلام حالة الطلب، إلخ.
أمثلة الردود:
استعلام الرصيد:
{
  "balance": "100.84292",
  "currency": "USD"
}
إضافة طلب:
{
  "order": 23501
}
لمزود "سيوكليفرز" / SeoClevers API
طريقة الطلب: POST
API URL: https://seoclevers.com/api/v2
المعلمات الأساسية:
key: مفتاح API الخاص بك.
action: مثل "services", "add", "status", إلخ.
أمثلة الردود:
استعلام الرصيد:
{
  "balance": "100.84292",
  "currency": "USD"
}
إضافة طلب:
{
  "order": 23501
}
ملاحظات حول استخدام الـ API:
يعتمد التطبيق على خادم وسيط (Proxy Server) لتحويل الطلبات المرسلة من العميل إلى POST وإضافة المعلمات الضرورية (مثل مفتاح API والـ action).
تُبنى البيانات المطلوبة لإرسال الطلب (مثل service, link, quantity، وغيرها) من خلال دمج بيانات الخدمات الخام (rawServices) وروابط الخدمات (serviceLinks) في كائن services.
تأكد من تحديث مفاتيح API في متغيرات البيئة الخاصة بالخادم (مثلاً DRD3M_API_KEY و SEOCLEVERS_API_KEY).
آلية تنسيق البيانات / Data Formatting Flow

العربية:
التصنيفات (Categories):
تُخزن في globalData.categories بهيكل هرمي يتيح اختيار التصنيف الرئيسي، ثم الفرعي، ثم الباقة (إن وجدت).
الخدمات الخام (Raw Services):
تُضاف معلومات الخدمة الأساسية (id، provider، defaultName) إلى globalData.rawServices.
روابط الخدمات (Service Links):
تُستخدم لربط خدمة خام بالتصنيفات المحددة، وتشمل الحقول:
rawServiceId
mainCategory
subCategory
subSubCategory
name (الاسم المعروض)
quantity
الخدمات النهائية (Final Services):
تُبنى بواسطة updateServicesFromLinks() التي تدمج بيانات rawServices مع serviceLinks لتكوين الكائن النهائي المطلوب لإرسال طلب الـ API.
English:
Categories:
Stored in globalData.categories as a hierarchical structure allowing selection of a main category, then subcategory, and finally a package (if applicable).
Raw Services:
Contains basic service information (id, provider, defaultName) in globalData.rawServices.
Service Links:
Used to link a raw service with selected categories, including fields such as:
rawServiceId
mainCategory
subCategory
subSubCategory
name (display name)
quantity
Final Services:
Built by the updateServicesFromLinks() function which merges rawServices with serviceLinks to produce the final object required for sending API orders.
التطوير والصيانة / Development & Maintenance

العربية:
تحديث البيانات:
يمكنك تعديل ملف servicesData.json لتحديث التصنيفات والخدمات، وسيقوم التطبيق بتحميلها وتخزينها تلقائيًا في localStorage.
تعريب الرسائل:
يتم تحويل رسائل الاستجابة في دالة translateResponse الموجودة في client.js إلى اللغة العربية.
أمان النظام:
تُخزن كلمات المرور في passwords.json، ومفاتيح الـ API تُحمل من متغيرات البيئة في server.js.
تحديث المفاتيح:
بفضل استخدام Environment Variables، يمكن تغيير مفاتيح الـ API بسهولة دون تعديل الكود.
اختبار شامل:
تأكد من اختبار جميع الوظائف في بيئة محلية أو بيئة staging قبل النشر النهائي.
English:
Updating Data:
You can modify servicesData.json to update categories and services. The front-end will automatically load and store the data in localStorage.
Translating Responses:
API response messages are translated by the translateResponse function in client.js into Arabic.
System Security:
Passwords are stored in passwords.json and API keys are loaded from environment variables in server.js.
Key Updates:
Using environment variables makes it easy to update or rotate API keys without modifying the code.
Comprehensive Testing:
Thoroughly test all functionalities in a local or staging environment before final deployment.
ملاحظات إضافية / Additional Notes

Self-Ping Preventing Sleep Mode:
يتضمن المشروع كودًا في server.js يقوم بإرسال طلب GET دوري (كل 15 دقيقة) إلى الدومين الخاص بالموقع (مثل https://my-fofo-pro.onrender.com/) للحفاظ على نشاط التطبيق ومنعه من الدخول في حالة السبات على استضافة Render.
Proxy Server:
الخادم الوسيط (server.js) مبني باستخدام Node.js و Express، ويتولى تحويل الطلبات المرسلة من العميل إلى POST مع إضافة المعلمات الضرورية، مما يُحسن الأمان ويتيح تجاوز قيود CORS.
كيفية التشغيل / How to Run

العربية:
تشغيل المشروع محليًا:
npm start
أو:
node server.js
الوصول إلى الواجهات:
public/index.html لصفحة إرسال الطلبات.
public/manage_services.html لصفحة إدارة الخدمات.
شاشة القفل:
عند تحميل الصفحة، ستظهر شاشة قفل تطلب كلمة المرور (كما هو موضح في passwords.json).
English:
Running the Project Locally:
npm start
or:
node server.js
Accessing the Interfaces:
public/index.html for the orders page.
public/manage_services.html for the services management page.
Lock Screen:
A lock screen will appear on page load, prompting for a password (as specified in passwords.json).
الخاتمة / Conclusion

العربية:
مشروع إدارة الطلبات والخدمات V3 هو نظام متكامل يعتمد على واجهة مستخدم حديثة وخادم وسيط لتوفير تجربة إدارة وإرسال طلبات متطورة وآمنة. تم تحديث النظام ليشمل تحسينات في تنظيم البيانات، التعامل مع الـ API، وحماية النظام باستخدام متغيرات البيئة وكلمات المرور. بعد الاختبارات النهائية، يُمكن نشر المشروع بثقة.

English:
The Orders & Services Management Project V3 is a comprehensive system that leverages a modern front-end interface and a proxy server to provide an advanced and secure order submission and service management experience. The system has been updated with improvements in data organization, API integration, and security by utilizing environment variables and password protection. After thorough testing, the project is ready for deployment.